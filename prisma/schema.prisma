generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model users_sync {
  id         String    @id
  name       String?
  email      String?
  created_at DateTime
  updated_at DateTime
  deleted_at DateTime?
  raw_json   Json
}

model Restaurant {
  id                    String         @id @default(cuid())
  name                  String
  description           String
  cuisine               String
  whatsappNumber        String
  whatsappPhoneNumberId String         @default("")
  whatsappAccessToken   String?        @default("")
  whatsappAppSecret     String?        @default("")
  webhookVerifyToken    String         @default("")
  supportedLanguages    Json
  isActive              Boolean        @default(true)
  isConcierge           Boolean        @default(false)
  userId                String
  welcomeMessage        String         @default("")
  businessHours         String         @default("")
  specialInstructions   String         @default("")
  orderingEnabled       Boolean        @default(true)
  deliveryInfo          String         @default("")
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  apiKeyCreatedAt       DateTime?
  apiKeyHash            String?        @db.VarChar(128)
  apiKeyRevokedAt       DateTime?
  conversations         Conversation[]
  menuItems             MenuItem[]
  messageLogs           MessageLog[]
  orders                Order[]

  @@index([userId])
}

model MenuItem {
  id           String     @id @default(cuid())
  restaurantId String
  name         String
  description  String
  price        Int
  category     String?
  isAvailable  Boolean    @default(true)
  embedding    Json?
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
}

model Conversation {
  id           String     @id @default(cuid())
  restaurantId String
  phoneNumber  String
  messages     Json
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  @@index([restaurantId, phoneNumber])
}

model Order {
  id           String      @id @default(cuid())
  restaurantId String
  customerName String
  phoneNumber  String
  items        Json
  total        Int
  notes        String?
  status       OrderStatus @default(pending)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])

  @@index([restaurantId, createdAt])
}

model MessageLog {
  id                String           @id @default(cuid())
  restaurantId      String
  phoneNumber       String
  whatsappMessageId String
  direction         MessageDirection
  messageType       String?
  templateName      String?
  status            String
  errorCode         String?
  errorTitle        String?
  errorDetail       String?
  raw               Json?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  restaurant        Restaurant       @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@index([restaurantId, createdAt])
  @@index([whatsappMessageId])
}

enum OrderStatus {
  pending
  confirmed
  preparing
  delivered
  cancelled
}

enum MessageDirection {
  inbound
  outbound
}
