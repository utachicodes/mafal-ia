// Prisma schema for Mafal-IA
// Local development uses SQLite. For production, change provider to postgresql and set env URLs.

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model users_sync {
  id              String    @id
  name            String?
  email           String?
  created_at      DateTime
  updated_at      DateTime
  deleted_at      DateTime?
  raw_json        Json
}

model Restaurant {
  id                     String      @id @default(cuid())
  name                   String
  description            String
  cuisine                String
  whatsappNumber         String
  whatsappPhoneNumberId  String      @default("") // maps to Meta business phone number ID
  // Optional per-tenant credentials (fallback to env vars when empty)
  whatsappAccessToken    String?     @default("")
  whatsappAppSecret      String?     @default("")
  // Per-restaurant webhook verification token (used by Meta webhook verification GET)
  webhookVerifyToken     String      @default("")
  supportedLanguages     Json
  isActive               Boolean     @default(true)
  // Marks this WhatsApp number as the global concierge that can search across all restaurants
  isConcierge            Boolean     @default(false)

  // User ownership
  userId                 String

  // Flattened chatbot context
  welcomeMessage         String      @default("")
  businessHours          String      @default("")
  specialInstructions    String      @default("")
  orderingEnabled        Boolean     @default(true)
  deliveryInfo           String      @default("")

  // API key (production): store ONLY the hash of the key
  apiKeyHash             String?
  apiKeyCreatedAt        DateTime?
  apiKeyRevokedAt        DateTime?

  menuItems              MenuItem[]
  conversations          Conversation[]
  orders                 Order[]
  messageLogs            MessageLog[]

  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt

  @@index([userId])
}

model MenuItem {
  id            String     @id @default(cuid())
  restaurantId  String
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id])
  name          String
  description   String
  price         Int
  category      String?
  isAvailable   Boolean    @default(true)
  // Optional embeddings for RAG (store as vector-like JSON for now)
  embedding     Json?
}

model Conversation {
  id            String     @id @default(cuid())
  restaurantId  String
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id])
  phoneNumber   String
  messages      Json       // array of ChatMessage
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([restaurantId, phoneNumber])
}

enum OrderStatus {
  pending
  confirmed
  preparing
  delivered
  cancelled
}

model Order {
  id            String       @id @default(cuid())
  restaurantId  String
  restaurant    Restaurant   @relation(fields: [restaurantId], references: [id])
  customerName  String
  phoneNumber   String
  // items: array of { itemName, quantity, price, specs } with arbitrary specs object
  items         Json
  // total in smallest currency unit (e.g., CFA)
  total         Int
  notes         String?
  status        OrderStatus  @default(pending)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([restaurantId, createdAt])
}

enum MessageDirection {
  inbound
  outbound
}

model MessageLog {
  id                 String            @id @default(cuid())
  restaurantId       String
  restaurant         Restaurant        @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  phoneNumber        String
  whatsappMessageId  String
  direction          MessageDirection
  messageType        String?
  templateName       String?
  status             String
  errorCode          String?
  errorTitle         String?
  errorDetail        String?
  raw                Json?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  @@index([restaurantId, createdAt])
  @@index([whatsappMessageId])
}
