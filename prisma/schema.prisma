// Prisma schema for Mafal-IA
// Postgres for production. Set DATABASE_URL to your Postgres connection string.

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  emailVerified DateTime?
  name          String?
  image         String?
  passwordHash  String?
  role          UserRole   @default(USER)
  accounts      Account[]
  sessions      Session[]
  restaurants   Restaurant[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([email])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  USER
  ADMIN
}

model Restaurant {
  id                     String      @id @default(cuid())
  name                   String
  description            String
  cuisine                String
  whatsappNumber         String
  whatsappPhoneNumberId  String      @default("") // maps to Meta business phone number ID
  // Optional per-tenant credentials (fallback to env vars when empty)
  whatsappAccessToken    String?     @default("")
  whatsappAppSecret      String?     @default("")
  // Per-restaurant webhook verification token (used by Meta webhook verification GET)
  webhookVerifyToken     String      @default("")
  supportedLanguages     Json
  isActive               Boolean     @default(true)
  // Marks this WhatsApp number as the global concierge that can search across all restaurants
  isConcierge            Boolean     @default(false)

  // User ownership
  userId                 String
  user                   User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Flattened chatbot context
  welcomeMessage         String      @default("")
  businessHours          String      @default("")
  specialInstructions    String      @default("")
  orderingEnabled        Boolean     @default(true)
  deliveryInfo           String      @default("")

  menuItems              MenuItem[]
  conversations          Conversation[]
  orders                 Order[]
  messageLogs            MessageLog[]

  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt

  @@index([userId])
}

model MenuItem {
  id            String     @id @default(cuid())
  restaurantId  String
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id])
  name          String
  description   String
  price         Int
  category      String?
  isAvailable   Boolean    @default(true)
  // Optional embeddings for RAG (store as vector-like JSON for now)
  embedding     Json?
}

model Conversation {
  id            String     @id @default(cuid())
  restaurantId  String
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id])
  phoneNumber   String
  messages      Json       // array of ChatMessage
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([restaurantId, phoneNumber])
}

enum OrderStatus {
  pending
  confirmed
  preparing
  delivered
  cancelled
}

model Order {
  id            String       @id @default(cuid())
  restaurantId  String
  restaurant    Restaurant   @relation(fields: [restaurantId], references: [id])
  customerName  String
  phoneNumber   String
  // items: array of { itemName, quantity, price, specs } with arbitrary specs object
  items         Json
  // total in smallest currency unit (e.g., CFA)
  total         Int
  notes         String?
  status        OrderStatus  @default(pending)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([restaurantId, createdAt])
}

enum MessageDirection {
  inbound
  outbound
}

model MessageLog {
  id                 String            @id @default(cuid())
  restaurantId       String
  restaurant         Restaurant        @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  phoneNumber        String
  whatsappMessageId  String
  direction          MessageDirection
  messageType        String?
  templateName       String?
  status             String
  errorCode          String?
  errorTitle         String?
  errorDetail        String?
  raw                Json?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  @@index([restaurantId, createdAt])
  @@index([whatsappMessageId])
}
